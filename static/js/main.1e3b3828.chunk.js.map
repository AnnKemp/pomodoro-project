{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","minutes","timerID","timer","stop","bind","start","startover","reset","sum","minus","close","this","setInterval","tick","setState","clearInterval","pluss","minun","min","document","getElementById","style","display","Start","onClick","Stop","Reset","Plus","Min","id","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e3b3828.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './modal_box.css'\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {minutes:20, timerID:'', timer:false};\n\n        this.stop = this.stop.bind(this);\n        this.start = this.start.bind(this);\n        this.startover = this.startover.bind(this);\n        this.reset = this.reset.bind(this);\n        this.sum = this.sum.bind(this);\n        this.minus= this.minus.bind(this);\n        this.close= this.close.bind(this);\n    }\n    componentDidMount() { // method runs after the component output has been rendered to the DOM. This is a good place to set up a timer:\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n        this.setState({\n            timer:false\n        });\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    };\n    stop() {\n        clearInterval(this.timerID);\n        this.setState({\n            timer:true\n        });\n    }\n    start() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n        this.setState({\n            timer:false\n        });\n    }\n    startover() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n        this.setState({\n            minutes:20, timer:false\n        });\n    }\n    reset() {\n        this.setState({\n            minutes:20, timer:false\n        });\n    }\n    sum() {\n        const pluss=(this.state.minutes)+1;\n        this.setState({\n            minutes: pluss\n        });\n    }\n    minus() {\n        const minun=(this.state.minutes)-1;\n        this.setState({\n            minutes: minun\n        });\n    }\n    tick() {\n        const min=(this.state.minutes)-1;\n        this.setState({\n            minutes: min\n        });\n    }\n    close(){\n        const modal = document.getElementById(\"myModal\");\n        modal.style.display = \"none\";\n    }\n\n    render() {\n        const Start =<button onClick={this.start}>Start</button>;\n        const Stop = <button onClick={this.stop}>Stop</button>;\n        const Reset = <button onClick={this.reset}>Reset</button>;\n        const Plus = <button onClick={this.sum}>+</button>\n        const Min = <button onClick={this.minus}>-</button>;\n\n            if (this.state.timer==true) {\n                return (\n                    <div>\n                    <h1>Countdown:</h1>\n                    <h2>{this.state.minutes}</h2>\n\n                        {Start}<br /><br />{Plus}{Min}\n\n                        { (this.state.minutes) <= 4 &&\n                            <section id=\"myModal\" style={{display:\"block\"}} className=\"modal\" onClick={this.close}>\n                            <div className=\"modal-content\">\n                            <span className=\"close\" onClick={this.close}>&times;</span>\n                            <p>take a break</p>\n                            <button onClick={this.startover}>Start over</button>\n                            </div>\n                            </section>\n                        }\n                    </div>\n                );\n            } else {\n                return (\n                    <div>\n            <h1>Countdown:</h1>\n            <h2>{this.state.minutes}</h2>\n\n                        {Reset}<br /><br />{Stop}\n\n                        { (this.state.minutes) <= 4 &&\n                        <section id=\"myModal\" style={{display:\"block\"}} className=\"modal\" onClick={this.close}>\n                            <div className=\"modal-content\">\n                                <span className=\"close\" onClick={this.close}>&times;</span>\n                                <p>take a break</p>\n                                <button onClick={this.startover}>Start over</button>\n                            </div>\n                        </section>\n                        }\n                    </div>\n                );}\n    }\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Timer />\n    </div>\n  );\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}